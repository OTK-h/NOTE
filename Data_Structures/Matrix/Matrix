template<typename T>
class Matrix {
private:
    int Rows;
    int Columns;
    T* Element;
    friend ostream& operator << (ostream& out, const Matrix<T>& tmp);
public:
    Matrix(int rows = 0, int columns = 0);
    Matrix(const Matrix<T>& tmp);
    ~Matrix() { delete element; }

    int rows() const { return Rows; }
    int columns() const { return Columns; }
    T& operator()(int i, int j) const;
    Matrix<T>& operator = (const Matrix <T>& tmp);
    Matrix<T> operator + () const;
    Matrix<T> operator - () const;
    Matrix<T> operator + (const Matrix<T>& tmp);
    Matrix<T> operator - (const Matrix<T>& tmp);
    Matrix<T> operator * (const Matrix<T>& tmp);
    Martix<T>& operator += (const Matrix<T>& tmp);
};

// upper triangular matrix  i>=j
// a[i][j] = b[(i+1)*i/2 + j]

// tridiagonal matrix
// a[i][j] = b[2*i + j]

template<typename T>
Matrix<T>::Matrix(int rows = 0, int columns = 0) {
    if (rows <= 0 || columns <= 0) throw illegelParameterValue();
    Rows = rows, Columns = columns;
    Elements = new T[Rows * Columns];
}
template<typename T>
Matrix<T>::Matrix(const Matrix<T>& tmp) {
    Rows = tmp.Rows;
    Columns = tmp.Columns;
    element = new T[Rows * Columns];
    copy(tmp.Elements, tmp.Elements + Rows * Columns, Elements);
}
template<typename T>
Matrix<T>& Matrix<T>::operator = (const Matrix<T>& tmp) {
    if (*this == tmp) return *this;
    delete[] Elements;
    Rows = tmp.Rows;
    Columns = tmp.Columns;
    Elements = new T[Rows * Columns];
    copy(tmp.Elements, tmp.Elements + Rows * Columns, Elements);
    return *this;
}
template<typename T>
T& Matrix<T>::operator()(int i, int j) const {
    if (i < 0 || j < 0 || i > Rows || j > Columns) throw illegalParameterValue();
    return Elements[(i - 1) * Columns + j - 1];
}
template<typename T>
Matrix<T> Matrix<T>::operator + (const Matrix<T>& tmp) {
    if (Rows != tmp.Rows || Columns != tmp.COlumns) throw matrixSizeMismatch();
    Matrix<T> ret(*this);
    for (int i = 0; i < Rows * Columns; i++)
        ret.Elements[i] += tmp.Elements[i];
    return ret;
}
template<typename T>
Matrix<T> Matrix<T>::operator * (const Matrix<T>& tmp) {
    if (Columns != tmp.Rows) throw matrixSizeMismatch();
    Matrix<T> ret(Rows, tmp.Columns);

    int thisIndexm = 0, tmpIndex = 0, retIndex = 0;

    for (int i = 1; i < Rows; i++) {
        for (int j = 1; j < tmp.Columns; j++) {
            T sum = Element[thisIndex] * tmp[tmpIndex];
            for (int k = 1; k < Columns; k++) {
                thisIndex++;
                tmpIndex += tmp.Columns;
                sum += Elements[thisIndex] * tmp.ELements[tmpIndex];
            }
            ret.Elements[retIndex] = sum;
            thisIndex -= (Columns - 1);
            tmpIndex = j;
        }
        thisIndex += Columns;
        tmpIndex = 0;
    }
    return ret;
}
